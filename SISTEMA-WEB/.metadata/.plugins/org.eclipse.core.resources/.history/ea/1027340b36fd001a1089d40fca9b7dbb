package dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import factory.Conexao;
import model.TbCliente;
import model.TbContasReceber;

public class DaoContasReceber {

	Conexao con;
	public boolean crudCliente(String acao, TbContasReceber receber) throws Exception {
		con = new Conexao(); 
		PreparedStatement ps = null;
		
		if(acao.equals("I")) {
			ps = con.getConexao().prepareStatement("EXEC PROC_CRUD_CONTAS_RECEBER I,NULL,?,?,?,?,?,?"); 
			ps.setString(1, receber.getMetodoPagamento());
			ps.setBigDecimal(2, receber.getDinheiro());
			ps.setBigDecimal(3, receber.getDebito());
			ps.setBigDecimal(4, receber.getCredito());
			ps.setDate(5, new java.sql.Date(receber.getDataCompra().getTime()));
			ps.setDate(6, new java.sql.Date(receber.getDataPrevistaReceber().getTime()));
		}		
		else if(acao.equals("A")) { 			
			ps = con.getConexao().prepareStatement("EXEC PROC_CRUD_CONTAS_RECEBER A,?,?,?,?,?,?,?");
			ps.setInt(1, receber.getIdReceber());
			ps.setString(2, receber.getMetodoPagamento());
			ps.setBigDecimal(3, receber.getDinheiro());
			ps.setBigDecimal(4, receber.getDebito());
			ps.setBigDecimal(5, receber.getCredito());
			ps.setDate(6, new java.sql.Date(receber.getDataCompra().getTime()));
			ps.setDate(7, new java.sql.Date(receber.getDataPrevistaReceber().getTime())); 
		}else if(acao.equals("E")){ 
			ps = con.getConexao().prepareStatement("EXEC PROC_CRUD_CONTAS_RECEBER E,?,NULL,NULL,NULL,NULL,NULL,NULL");  
			ps.setInt(1, receber.getIdReceber()); 
		} 
		if(ps.executeUpdate()>0) { 
			return true;			
		}else {
			return false;
		}
}
	
		public TbContasReceber ReceberPorId(TbContasReceber receber) {
			TbContasReceber cliente = new TbContasReceber();
			try {
				con = new Conexao();
				PreparedStatement ps = con.getConexao().prepareStatement("SELECT * FROM TB_CONTAS_RECEBER WHERE ID_RECEBER=?"); 
				ps.setInt(1, receber.getIdReceber());
				ResultSet rs = ps.executeQuery();
				
				while (rs.next()) { 
					receber.setIdReceber(Integer.parseInt(rs.getString("ID_RECEBER")));
					 	
					
					ID_COMANDA_RECEBER
					METODO_PAGAMENTO
					DINHEIRO
					DEBITO
					CREDITO
					DATA_COMPRA
					DATA_PREVISTA_RECEBER
				} 			
			} catch (Exception e) {
				e.printStackTrace();
			}	 
			return cliente;
		}
	
	public List<TbCliente> listaCliente() {
		List<TbCliente> listacliente = new ArrayList<TbCliente>();	
		try {
			con = new Conexao();
			Statement stmt = con.getConexao().createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM TB_CONTAS_RECEBER");
			
			while (rs.next()) {
				TbCliente cliente = new TbCliente(); 
				
				cliente.setIdCli(rs.getString("ID_CLI"));
				cliente.setNome(rs.getString("NOME"));
				cliente.setSobrenome(rs.getString("SOBRENOME"));
				cliente.setRg(rs.getString("RG"));
				cliente.setCpf(rs.getString("CPF"));
				cliente.setDtNasc(rs.getDate("DT_NASC"));
				cliente.setAtivo(rs.getBoolean("ATIVO"));
				cliente.setSexo(rs.getString("SEXO"));
							
				listacliente.add(cliente);
			} 			
		} catch (Exception e) {
			e.printStackTrace();
		}	 
		return listacliente;
	}
}	